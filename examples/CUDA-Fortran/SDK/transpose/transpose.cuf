! 
!     Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
!
! NVIDIA CORPORATION and its licensors retain all intellectual property
! and proprietary rights in and to this software, related documentation
! and any modifications thereto.  Any use, reproduction, disclosure or
! distribution of this software and related documentation without an express
! license agreement from NVIDIA CORPORATION is strictly prohibited.
! 

! Transpose examples
!    Avoid powers of two sizes which lead to partition camping on C10x0
!    See www.pgroup.com/lit/articles/insider/v2n2a2.htm
!    The NVIDIA SDK transpose example has a good discussion on this topic.
 
! The ASSUMED_SHAPE definition toggles whether dummy arguments to 
! kernels are declared with parameter dimensions (default) or as
! assumed shaped arrays (which currently have a perf hit)

!#define ASSUMED_SHAPE


module dimensions_m

  implicit none

  integer, parameter :: TILE_DIM = 32
  integer, parameter :: BLOCK_ROWS = 8
  integer, parameter :: NUM_REPS = 100         ! 100, but for emu 10 
  integer, parameter :: nx = 1152, ny = 1152   ! 1152, but for emu 64
  integer, parameter :: mem_size = nx*ny*4

end module dimensions_m



module kernels_m

  use dimensions_m
  implicit none

contains

  ! simple copy kernel
  !
  ! used as reference case representing best 
  ! effictive bandwidth

  attributes(global) subroutine copy(odata, idata)

    #ifdef ASSUMED_SHAPE
    real, intent(out) :: odata(:,:)
    real, intent(in) :: idata(:,:)
    #else
    real, intent(out) :: odata(nx,ny)
    real, intent(in) :: idata(nx,ny)
    #endif
    integer :: x, y, j

    x = (blockIdx%x-1) * TILE_DIM + threadIdx%x
    y = (blockIdx%y-1) * TILE_DIM + threadIdx%y

    do j = 0, TILE_DIM-1, BLOCK_ROWS
       odata(x,y+j) = idata(x,y+j)
    end do
  end subroutine copy

  ! copy kernel using shared memory
  !
  ! also used as reference case, demonstrating effect of
  ! using shared memory

  attributes(global) subroutine copySharedMem(odata, idata)

    #ifdef ASSUMED_SHAPE
    real, intent(out) :: odata(:,:)
    real, intent(in) :: idata(:,:)
    #else
    real, intent(out) :: odata(nx,ny)
    real, intent(in) :: idata(nx,ny)
    #endif

    real, shared :: tile(TILE_DIM, TILE_DIM)
    integer :: x, y, j

    x = (blockIdx%x-1) * TILE_DIM + threadIdx%x
    y = (blockIdx%y-1) * TILE_DIM + threadIdx%y

    do j = 0, TILE_DIM-1, BLOCK_ROWS
       tile(threadIdx%x, threadIdx%y+j) = idata(x,y+j)
    end do

    call syncthreads()

    do j = 0, TILE_DIM-1, BLOCK_ROWS
       odata(x,y+j) = tile(threadIdx%x, threadIdx%y+j)          
    end do
  end subroutine copySharedMem

  ! naive transpose
  !
  ! simplest transpose - doesn't use shared memory
  ! reads from global memory are coalesced but not writes

  attributes(global) subroutine transposeNaive(odata, idata)

    #ifdef ASSUMED_SHAPE
    real, intent(out) :: odata(:,:)
    real, intent(in) :: idata(:,:)
    #else
    real, intent(out) :: odata(ny,nx)
    real, intent(in) :: idata(nx,ny)
    #endif

    integer :: x, y, j

    x = (blockIdx%x-1) * TILE_DIM + threadIdx%x
    y = (blockIdx%y-1) * TILE_DIM + threadIdx%y

    do j = 0, TILE_DIM-1, BLOCK_ROWS
       odata(y+j,x) = idata(x,y+j)     
    end do
  end subroutine transposeNaive

  ! coalesced transpose
  !
  ! uses shared memory to achieve coalesing in both reads 
  ! and writes
  !
  ! tile size causes shared memory bank conflicts

  attributes(global) subroutine transposeCoalesced(odata, idata)

    #ifdef ASSUMED_SHAPE
    real, intent(out) :: odata(:,:)
    real, intent(in) :: idata(:,:)
    #else
    real, intent(out) :: odata(ny,nx)
    real, intent(in) :: idata(nx,ny)
    #endif

    real, shared :: tile(TILE_DIM, TILE_DIM)
    integer :: x, y, j

    x = (blockIdx%x-1) * TILE_DIM + threadIdx%x
    y = (blockIdx%y-1) * TILE_DIM + threadIdx%y

    do j = 0, TILE_DIM-1, BLOCK_ROWS
       tile(threadIdx%x, threadIdx%y+j) = idata(x,y+j)
    end do

    call syncthreads()

    x = (blockIdx%y-1) * TILE_DIM + threadIdx%x
    y = (blockIdx%x-1) * TILE_DIM + threadIdx%y

    do j = 0, TILE_DIM-1, BLOCK_ROWS
       odata(x,y+j) = tile(threadIdx%y+j, threadIdx%x)          
    end do
  end subroutine transposeCoalesced

  ! no bank-conflict transpose
  !
  ! same as transposeCoalesced except the first tile dimension is padded 
  ! to avoid shared memory bank conflicts

  attributes(global) subroutine transposeNoBankConflicts(odata, idata)

    #ifdef ASSUMED_SHAPE
    real, intent(out) :: odata(:,:)
    real, intent(in) :: idata(:,:)
    #else
    real, intent(out) :: odata(ny,nx)
    real, intent(in) :: idata(nx,ny)
    #endif

    real, shared :: tile(TILE_DIM+1, TILE_DIM)
    integer :: x, y, j

    x = (blockIdx%x-1) * TILE_DIM + threadIdx%x
    y = (blockIdx%y-1) * TILE_DIM + threadIdx%y

    do j = 0, TILE_DIM-1, BLOCK_ROWS
       tile(threadIdx%x, threadIdx%y+j) = idata(x,y+j)
    end do

    call syncthreads()

    x = (blockIdx%y-1) * TILE_DIM + threadIdx%x
    y = (blockIdx%x-1) * TILE_DIM + threadIdx%y

    do j = 0, TILE_DIM-1, BLOCK_ROWS
       odata(x,y+j) = tile(threadIdx%y+j, threadIdx%x)          
    end do
  end subroutine transposeNoBankConflicts

end module kernels_m



program transpose

  use cudafor
  use kernels_m 
  use dimensions_m

  implicit none

  type (dim3) :: dimGrid, dimBlock
  type (cudaEvent) :: startEvent, stopEvent
  real :: time

  real :: h_idata(nx,ny), h_cdata(nx,ny), h_tdata(ny,nx), gold(ny,nx)
  real, device :: d_idata(nx,ny), d_cdata(nx,ny), d_tdata(ny,nx)

  integer :: i, j, istat, nerrors

  nerrors = 0

  ! check parameters and calculate execution configuration

  if (mod(nx, TILE_DIM) /= 0 .or. mod(ny, TILE_DIM) /= 0) then
     write(*,*) 'nx and ny must be a multiple of TILE_DIM'
     stop
  end if

  if (mod(TILE_DIM, BLOCK_ROWS) /= 0) then
     write(*,*) 'TILE_DIM must be a multiple of BLOCK_ROWS'
     stop
  end if

  dimGrid = dim3(nx/TILE_DIM, ny/TILE_DIM, 1)
  dimBlock = dim3(TILE_DIM, BLOCK_ROWS, 1)

  ! write parameters

  write(*,*)
  write(*,'(''Matrix size:'', i5, i5, '',  Block size:'', i3, i3, '',  Tile size:'', i3, i3)') &
       nx, ny, TILE_DIM, BLOCK_ROWS, TILE_DIM, TILE_DIM

  write(*,'(''dimGrid:'', i4,i4,i4, '',   dimBlock:'', i4,i4,i4)') &
       dimGrid%x, dimGrid%y, dimGrid%z, dimBlock%x, dimBlock%y, dimBlock%z

  ! initialize data

  ! host

  do j = 1, ny
     do i = 1, nx
        h_idata(i,j) = i+(j-1)*nx
     enddo
  enddo

  call transposeGold(gold, h_idata)

  ! device

  d_idata = h_idata
  d_tdata = -1.0
  d_cdata = -1.0

  ! events for timing

  istat = cudaEventCreate(startEvent)
  istat = cudaEventCreate(stopEvent)

  ! Write how kernel dummy vars are displayed

  write(*,*)
  #ifdef ASSUMED_SHAPE
  write(*,*) 'Using assumed shape declarations for dummy variables in kernels'
  #else
  write(*,*) 'Using parameters to declare kernel dummy variable sizes'
  #endif

  ! ------------
  ! time kernels
  ! ------------

  write(*,'(/,a25,a25, a25)') 'Routine', 'Bandwidth (GB/s)'

  ! ----
  ! copy 
  ! ----

  write(*,'(a25)', advance='NO') 'copy'

  ! warmup
  call copy<<<dimGrid, dimBlock>>>(d_cdata, d_idata)
  
  istat = cudaEventRecord(startEvent, 0)
  do i=1, NUM_REPS
     call copy<<<dimGrid, dimBlock>>>(d_cdata, d_idata)
  end do
  istat = cudaEventRecord(stopEvent, 0)
  istat = cudaEventSynchronize(stopEvent)
  istat = cudaEventElapsedTime(time, startEvent, stopEvent)

  h_cdata = d_cdata
  call postprocessAndReset(h_idata, h_cdata, time, nerrors)

  do j = 1, ny
     do i = 1, nx
        if (h_idata(i,j) /= h_cdata(i,j)) then
           write(*,*) i,j,h_idata(i,j), h_cdata(i,j)
        endif
     enddo
  enddo

  ! -------------
  ! copySharedMem 
  ! -------------

  write(*,'(a25)', advance='NO') 'shared memory copy'

  d_cdata = -1.0
  ! warmup
  call copySharedMem<<<dimGrid, dimBlock>>>(d_cdata, d_idata)

  istat = cudaEventRecord(startEvent, 0)
  do i=1, NUM_REPS
     call copySharedMem<<<dimGrid, dimBlock>>>(d_cdata, d_idata)
  end do
  istat = cudaEventRecord(stopEvent, 0)
  istat = cudaEventSynchronize(stopEvent)
  istat = cudaEventElapsedTime(time, startEvent, stopEvent)

  h_cdata = d_cdata
  call postprocessAndReset(h_idata, h_cdata, time, nerrors)

  ! --------------
  ! transposeNaive 
  ! --------------

  write(*,'(a25)', advance='NO') 'naive transpose'

  d_tdata = -1.0
  ! warmup
  call transposeNaive<<<dimGrid, dimBlock>>>(d_tdata, d_idata)

  istat = cudaEventRecord(startEvent, 0)
  do i=1, NUM_REPS
     call transposeNaive<<<dimGrid, dimBlock>>>(d_tdata, d_idata)
  end do
  istat = cudaEventRecord(stopEvent, 0)
  istat = cudaEventSynchronize(stopEvent)
  istat = cudaEventElapsedTime(time, startEvent, stopEvent)

  h_tdata = d_tdata
  call postprocessAndReset(gold, h_tdata, time, nerrors)

  ! ------------------
  ! transposeCoalesced 
  ! ------------------

  write(*,'(a25)', advance='NO') 'coalesced transpose'

  d_tdata = -1.0
  ! warmup
  call transposeCoalesced<<<dimGrid, dimBlock>>>(d_tdata, d_idata)

  istat = cudaEventRecord(startEvent, 0)
  do i=1, NUM_REPS
     call transposeCoalesced<<<dimGrid, dimBlock>>>(d_tdata, d_idata)
  end do
  istat = cudaEventRecord(stopEvent, 0)
  istat = cudaEventSynchronize(stopEvent)
  istat = cudaEventElapsedTime(time, startEvent, stopEvent)

  h_tdata = d_tdata
  call postprocessAndReset(gold, h_tdata, time, nerrors)

  ! ------------------------
  ! transposeNoBankConflicts
  ! ------------------------

  write(*,'(a25)', advance='NO') 'conflict-free transpose'

  d_tdata = -1.0
  ! warmup
  call transposeNoBankConflicts<<<dimGrid, dimBlock>>>(d_tdata, d_idata)

  istat = cudaEventRecord(startEvent, 0)
  do i=1, NUM_REPS
     call transposeNoBankConflicts<<<dimGrid, dimBlock>>>(d_tdata, d_idata)
  end do
  istat = cudaEventRecord(stopEvent, 0)
  istat = cudaEventSynchronize(stopEvent)
  istat = cudaEventElapsedTime(time, startEvent, stopEvent)

  h_tdata = d_tdata
  call postprocessAndReset(gold, h_tdata, time, nerrors)

  ! cleanup

  write(*,*)
  if (nerrors .ne. 0) then
     print *, "Test FAILED"
  else
     print *, "Test PASSED"
  endif

  write(*,*)

  istat = cudaEventDestroy(startEvent)
  istat = cudaEventDestroy(stopEvent)  

contains

  subroutine transposeGold(gold, idata)
    real, intent(out) :: gold(:,:)
    real, intent(in) :: idata(:,:)

    integer :: i, j

    do j = 1, ny
       do i = 1, nx
          gold(j,i) = idata(i,j)
       enddo
    enddo
  end subroutine transposeGold

  subroutine postprocessAndReset(ref, res, t, nerrors)
    real, intent(in) :: ref(:,:), res(:,:), t          ! host reference, result and time
    integer :: nerrors
    if (all(res == ref)) then
       write(*,'(f20.2)') 2.*1000*mem_size/(1024**3 * t/NUM_REPS)
    else
       write(*,'(a20)') '*** Failed ***'
       nerrors = nerrors + 1
    end if
  end subroutine postprocessAndReset

end program transpose
